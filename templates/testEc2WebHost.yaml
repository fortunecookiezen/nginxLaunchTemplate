---
AWSTemplateFormatVersion: "2010-09-09"
Description: "generic web host for testing purposes. Provides 80/443 endpoints with generic nginx page"
Parameters:
  ASI:
    Type: String
    MinLength: 2
    MaxLength: 4
    Description: "asi - must be lower-case, limit 4 characters"
    AllowedPattern: "[a-z]*"
  Environment:
    Type: String
    MinLength: 3
    MaxLength: 7
    Description: "environment (nonprod|dev|itg|cat|prod) - must be lower-case, limit 7 characters"
    AllowedPattern: "[a-z]*"
  Owner:
    Type: String
    Description: "email address of the the Owner of this stack"
    Default: "admin@root.com"
    AllowedPattern: "^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
  subnetid:
    Type: AWS::EC2::Subnet::Id
    Description: "need subnet id for EC2 instance"
  securitygroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: "EC2 Security group for instance"
  DeploymentBucketName:
    Type: String
    Description: "s3 bucket where deployment files are kept"
  EnvironmentSize:
    Type: String
    Default: SMALL
    AllowedValues:
      - SMALL
      - MEDIUM
      - LARGE
    Description: Select Environment Size (S,M,L)
  keyname:
    Type: AWS::EC2::KeyPair::KeyName

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - 
      Label:
        default: "Environment Configuration"
      Parameters:
      - ASI
      - Environment
      - Owner
    -
      Label: 
        default: "Network Configuration"
      Parameters:
        - securitygroups
        - subnetid
    -
      Label:
        default: "Instance Configuration"
      Parameters:
        - DeploymentBucketName
        - EnvironmentSize
        - keyname
  
Mappings:
  RegionMap:
    us-east-1:
      "AMALINUX2" : "ami-035be7bafff33b6b6"
    us-west-2:
      "AMALINUX2" : "ami-032509850cf9ee54e"
  InstanceSize:
    SMALL:
      "EC2" : "t3.small"
    MEDIUM:
      "EC2" : "t3.medium"
    LARGE:
      "EC2" : "t3.large"
Resources:
  EC2:
    Type: "AWS::EC2::Instance"
    DeletionPolicy: Delete
    Properties:
      IamInstanceProfile: !Join ["-", [!Ref "AWS::StackName", "Ec2Profile"]]
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX2] 
      InstanceType: !FindInMap [InstanceSize, !Ref EnvironmentSize, EC2]
      KeyName: !Ref keyname
      SecurityGroupIds: !Ref securitygroups
      SubnetId: !Ref subnetid
      Tags:
        -
          Key: "Name"
          Value: "nginxproxy"
        -
          Key: "Project"
          Value: !Ref ASI
        -
          Key: "Environment"
          Value: !Ref Environment
        -
          Key: "Owner"
          Value: !Ref Owner

      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap # good practice - always do this.
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2 --configsets nginx --region ${AWS::Region}
            yum -y update
            amazon-linux-extras install nginx1.12 -y
            # openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048 #takes too long
            mkdir -m 700 /etc/ssl/private
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout /etc/ssl/private/nginx-selfsigned.key \
            -out /etc/ssl/certs/nginx-selfsigned.crt \
            -subj '/C=US/ST=Nebraska/L=Omaha/O=${ASI}/OU=${Environment}/CN=www.${Environment}.${ASI}.aws.service/emailAddress=${Owner}'
            /bin/systemctl enable nginx.service #manually enable this thing
            /bin/systemctl restart nginx.service #manually kick this thing
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2 --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: "1"
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Access:
          type: "S3"
          buckets:
            - !Ref DeploymentBucketName
          roleName:
            Ref: NgxLtRole
      AWS::CloudFormation::Init:
        configSets:
          nginx:
            - "configure_cfn"
            - "config_nginx"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2 --configsets nginx --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        config_nginx:
          sources: 
            /etc/nginx: !Sub "https://s3.amazonaws.com/${DeploymentBucketName}/${ASI}/${Environment}/nginx-webhost.tar.gz"
          services: 
            sysvinit: 
              nginx: 
                enabled: "true"
                ensureRunning: "true"
                files: 
                  - "/etc/nginx/nginx.conf"
  NgxLtRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: nginxEC2
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ssm:DescribeAssociation
          - ssm:GetDeployablePatchSnapshotForInstance
          - ssm:GetDocument
          - ssm:DescribeDocument
          - ssm:GetManifest
          - ssm:GetParameters
          - ssm:ListAssociations
          - ssm:ListInstanceAssociations
          - ssm:PutInventory
          - ssm:PutComplianceItems
          - ssm:PutConfigurePackageResult
          - ssm:UpdateAssociationStatus
          - ssm:UpdateInstanceAssociationStatus
          - ssm:UpdateInstanceInformation
          Resource: "*"
        - Effect: Allow
          Action:
          - ssmmessages:CreateControlChannel
          - ssmmessages:CreateDataChannel
          - ssmmessages:OpenControlChannel
          - ssmmessages:OpenDataChannel
          Resource: "*"
        - Effect: Allow
          Action:
          - ec2messages:AcknowledgeMessage
          - ec2messages:DeleteMessage
          - ec2messages:FailMessage
          - ec2messages:GetEndpoint
          - ec2messages:GetMessages
          - ec2messages:SendReply
          Resource: "*"
        - Effect: Allow
          Action:
          - cloudwatch:PutMetricData
          Resource: "*"
        - Effect: Allow
          Action:
          - ec2:DescribeInstanceStatus
          Resource: "*"
        - Effect: Allow
          Action:
          - ds:CreateComputer
          - ds:DescribeDirectories
          Resource: "*"
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:DescribeLogGroups
          - logs:DescribeLogStreams
          - logs:PutLogEvents         
          Resource: "*"
        - Effect: Allow
          Action: 
          - s3:GetBucketLocation
          - s3:PutObject
          - s3:GetObject
          - s3:GetEncryptionConfiguration
          - s3:AbortMultipartUpload
          - s3:ListMultipartUploadParts
          - s3:ListBucket
          - s3:ListBucketMultipartUploads
          Resource: "*"
      Roles:
      - !Ref NgxLtRole
  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref NgxLtRole
      InstanceProfileName: !Join ["-", [!Ref "AWS::StackName", "Ec2Profile"]]

Outputs:
  publicDnsName:
    Description: public url for nginx
    Value: !Join ["", ["http://", !GetAtt EC2.PublicDnsName, "/"]]
  privateDnsName:
    Description: private url for instance
    Value: !Join ["", ["http://", !GetAtt EC2.PrivateDnsName, "/"]] 

# to Do:
# add something other than the nginx default web pages
# add some kind of health check endpoint content