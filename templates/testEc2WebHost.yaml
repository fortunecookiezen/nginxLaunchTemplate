---
AWSTemplateFormatVersion: "2010-09-09"
Description: "generic web host for testing purposes. Provides 80/443 endpoints with generic testing page.
              Be Careful, this is for testing, and has a WIDE-OPEN security group!"
Parameters:
  App:
    Type: String
    AllowedValues:
      - api
      - www
    Description: "Select endpoint proxy (api|www)"
  ASI:
    Type: String
    MinLength: 2
    MaxLength: 5
    Description: "asi - must be lower-case, limit 4 characters"
    AllowedPattern: "[a-z]*"
  Environment:
    Type: String
    MinLength: 3
    MaxLength: 7
    Description: "environment (nonprod|dev|itg|cat|prod) - must be lower-case, limit 7 characters"
    AllowedPattern: "[a-z]*"
  Owner:
    Type: String
    Description: "email address of the the Owner of this stack"
    Default: "admin@root.com"
    AllowedPattern: "^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
  ConfigVersion:
    Type: String
    Description: "major.minor version of the config to use, eg: 1.0. Use of this flag forces instance restart"
    MinLength: 3
    MaxLength: 5
    AllowedPattern: '(\d{1,2})\.(\d{1,2})'
  vpcid:
    Type: AWS::EC2::VPC::Id
  subnetid:
    Type: AWS::EC2::Subnet::Id
    Description: "need subnet id for EC2 instance"
  EnvironmentSize:
    Type: String
    Default: SMALL
    AllowedValues:
      - SMALL
      - MEDIUM
      - LARGE
    Description: Select Environment Size (S,M,L)
  keyname:
    Type: AWS::EC2::KeyPair::KeyName

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - 
      Label:
        default: "Environment Configuration"
      Parameters:
      - App
      - ASI
      - Environment
      - Owner
    -
      Label: 
        default: "Network Configuration"
      Parameters:
        - vpcid
        - subnetid
    -
      Label:
        default: "Instance Configuration"
      Parameters:
        - ConfigVersion
        - EnvironmentSize
        - keyname
  
Mappings:
  RegionMap:
    us-east-1:
      "AMALINUX2" : "ami-035be7bafff33b6b6"
    us-west-2:
      "AMALINUX2" : "ami-032509850cf9ee54e"
  InstanceSize:
    SMALL:
      "EC2" : "t3.small"
    MEDIUM:
      "EC2" : "t3.medium"
    LARGE:
      "EC2" : "t3.large"
Resources:
  DebugSg:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "delete this stack!"
      VpcId: !Ref vpcid
      SecurityGroupIngress:
        -
          CidrIp: 10.0.0.0/8
          IpProtocol: "-1"
          ToPort: -1
          FromPort: -1
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: "TCP"
          ToPort: 80
          FromPort: 80
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: "TCP"
          ToPort: 443
          FromPort: 443
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          ToPort: -1
          IpProtocol: "-1"
      Tags:
        -
          Key: "Name"
          Value: !Sub "${App}-${Environment}-${ASI}-debug-sg"
        -
          Key: "Project"
          Value: !Ref ASI
        -
          Key: "Environment"
          Value: !Ref Environment
        -
          Key: "Owner"
          Value: !Ref Owner

  EC2:
    Type: "AWS::EC2::Instance"
    DeletionPolicy: Delete
    Properties:
      IamInstanceProfile: !Join ["-", [!Ref "AWS::StackName", "Ec2Profile"]]
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX2] 
      InstanceType: !FindInMap [InstanceSize, !Ref EnvironmentSize, EC2]
      KeyName: !Ref keyname
      SecurityGroupIds: 
        - !Ref DebugSg
      SubnetId: !Ref subnetid
      Tags:
        -
          Key: "Name"
          Value: !Sub "Delete ${AWS::StackName}!"
        -
          Key: "Project"
          Value: !Ref ASI
        -
          Key: "Environment"
          Value: !Ref Environment
        -
          Key: "Owner"
          Value: !Ref Owner

      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            # configVersion ${ConfigVersion}
            yum update -y aws-cfn-bootstrap # good practice - always do this.
            yum update -y #update them all until this breaks something, kept redunandant so it can be commented out
            mkdir -m 700 /etc/ssl/private
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout /etc/ssl/private/nginx-selfsigned.key \
            -out /etc/ssl/certs/nginx-selfsigned.crt \
            -subj '/C=US/ST=Nebraska/L=Omaha/O=${ASI}/OU=${Environment}/CN=www.${Environment}.${ASI}.aws.service/emailAddress=${Owner}'
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2 --configsets nginx --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2 --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: "1"
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          nginx:
            - "configure_cfn"
            - "config_nginx"
            - "install_awslogs"
        configure_cfn:  
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2 --configsets nginx --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        config_nginx:
          commands:
            01_install_nginx:
              command: amazon-linux-extras install nginx1.12 -y
            02_enable_nginx:
              command: /bin/systemctl enable nginx.service
            03_start_nginx:
              command: /bin/systemctl restart nginx.service
          files:
            /var/www/html/index.html:
              content: !Sub |
                <html>
                  <body>
                    Hello from ${App}.${Environment}.${ASI}.aws.service
                  </body>
                </html>
              mode: 000644
              owner: root
              group: root
            /var/www/html/status.json:
              content: |
                {"message": "healthy"}
            /etc/nginx/nginx.conf:
              content: !Sub |
                user nginx;
                worker_processes auto;
                error_log /var/log/nginx/error.log;
                events {
                  worker_connections 1024;
                }
                http {
                  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                                    '$status $body_bytes_sent "$http_referer" '
                                    '"$http_user_agent" "$http_x_forwarded_for"';

                  access_log /var/log/nginx/access.log  main;
                  sendfile on;
                  tcp_nopush          on;
                  tcp_nodelay         on;
                  keepalive_timeout   65;
                  types_hash_max_size 2048;
 
                  include             /etc/nginx/mime.types;
                  default_type        application/octet-stream;

                  server {
                    listen       80;
                    listen       443 ssl http2 default_server;
                    server_name  ${App}.${Environment}.${ASI}.aws.service;
                    root         /usr/share/nginx/html;
                    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
                    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
                    ssl_session_cache shared:SSL:1m;
                    ssl_session_timeout  10m;
                    ssl_ciphers HIGH:!aNULL:!MD5;
                    ssl_prefer_server_ciphers on;

                    location / {
                      root /var/www/html;
                    }
                  }
                }
              mode: 000644
              owner: root
              group: root
# this is broken with a chkconfig error, 
# commented out until it's fixed, 
# or one of us includes a proper init script
#          services: 
#            sysvinit: 
#              nginx: 
#                enabled: true
#                ensureRunning: true
#                files: 
#                  - /etc/nginx/nginx.conf
        install_awslogs:
          commands:
            01_install_awslogs:
              command: yum install -y awslogs
            02_configure_awslogs:
              command: cp /tmp/awslogs/awscli.conf /etc/awslogs/awscli.conf
          files:
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                use_gzip_http_content_encoding = true

                [nginx]
                file = /var/log/nginx/access.log
                log_group_name = ${ASI}-${Environment}-${App}-proxy-log-group
                log_stream_name = ${ASI}-${Environment}-${App}-access-logs
                datetime_format = %b %d %H:%M:%S
                buffer_duration = 5000
                initial_position = start_of_file
            /tmp/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
          services:
            sysvinit:
              awslogsd:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/awslogs/awslogs.conf"
                  - "/etc/awslogs/awscli.conf"

  NgxLtRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: nginxEC2
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ssm:DescribeAssociation
          - ssm:GetDeployablePatchSnapshotForInstance
          - ssm:GetDocument
          - ssm:DescribeDocument
          - ssm:GetManifest
          - ssm:GetParameters
          - ssm:ListAssociations
          - ssm:ListInstanceAssociations
          - ssm:PutInventory
          - ssm:PutComplianceItems
          - ssm:PutConfigurePackageResult
          - ssm:UpdateAssociationStatus
          - ssm:UpdateInstanceAssociationStatus
          - ssm:UpdateInstanceInformation
          Resource: "*"
        - Effect: Allow
          Action:
          - ssmmessages:CreateControlChannel
          - ssmmessages:CreateDataChannel
          - ssmmessages:OpenControlChannel
          - ssmmessages:OpenDataChannel
          Resource: "*"
        - Effect: Allow
          Action:
          - ec2messages:AcknowledgeMessage
          - ec2messages:DeleteMessage
          - ec2messages:FailMessage
          - ec2messages:GetEndpoint
          - ec2messages:GetMessages
          - ec2messages:SendReply
          Resource: "*"
        - Effect: Allow
          Action:
          - cloudwatch:PutMetricData
          Resource: "*"
        - Effect: Allow
          Action:
          - ec2:DescribeInstanceStatus
          Resource: "*"
        - Effect: Allow
          Action:
          - ds:CreateComputer
          - ds:DescribeDirectories
          Resource: "*"
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:DescribeLogGroups
          - logs:DescribeLogStreams
          - logs:PutLogEvents         
          Resource: "*"
        - Effect: Allow
          Action: 
          - s3:GetBucketLocation
          - s3:PutObject
          - s3:GetObject
          - s3:GetEncryptionConfiguration
          - s3:AbortMultipartUpload
          - s3:ListMultipartUploadParts
          - s3:ListBucket
          - s3:ListBucketMultipartUploads
          Resource: "*"
      Roles:
      - !Ref NgxLtRole
  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref NgxLtRole
      InstanceProfileName: !Join ["-", [!Ref "AWS::StackName", !Ref "AWS::Region", "Ec2Profile"]]

Outputs:
  httpEndpoint:
    Description: public url for nginx
    Value: !Join ["", ["http://", !GetAtt EC2.PublicDnsName, "/"]]
  httpsEndpoint:
    Description: public url for nginx
    Value: !Join ["", ["https://", !GetAtt EC2.PublicDnsName, "/"]]    
  privateEndpoint:
    Description: private url for instance
    Value: !Join ["", ["http://", !GetAtt EC2.PrivateDnsName, "/"]] 

# to Do:
# add something other than the nginx default web pages
# add some kind of health check endpoint content