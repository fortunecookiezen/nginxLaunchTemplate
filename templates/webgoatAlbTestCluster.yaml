---
Description: "Webgoat deployment behind Application LoadBalancer,Target Group, ASG and Launch Template"
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  App:
    Type: String
    AllowedValues:
      - webgoat
    Description: "Select endpoint (webgoat)"
  ASI:
    Type: String
    MinLength: 2
    MaxLength: 5
    Description: "asi - must be lower-case, limit 4 characters"
    AllowedPattern: "[a-z]*"
  Environment:
    Type: String
    MinLength: 3
    MaxLength: 7
    Description: "environment (nonprod|dev|itg|cat|prod) - must be lower-case, limit 7 characters"
    AllowedPattern: "[a-z]*"
  Owner:
    Type: String
    Description: "email address of the the Owner of this stack"
    Default: "admin@root.com"
    AllowedPattern: "^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
  ConfigVersion:
    Type: String
    Description: "major.minor version of the config to use, eg: 1.0"
    MinLength: 3
    MaxLength: 5
    AllowedPattern: '(\d{1,2})\.(\d{1,2})'
  LogBucket:
    Type: String
    Description: "s3 elb logbucket name"
    Default: "fcz-dev-us-east-1-elblogs"
  certificatearn:
    Type: String
    Description: "arn for the load balancer tls listener certificate"
  vpcid:
    Type: AWS::EC2::VPC::Id
  keyname:
    Type: AWS::EC2::KeyPair::KeyName
  lbsubneta:
    Type: AWS::EC2::Subnet::Id
    Description: "public subnet for load balancer placment"
  lbsubnetb:
    Type: AWS::EC2::Subnet::Id
    Description: "public subnet for load balancer placment"
  subnetid:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "private subnets for autoscale group"
  EnvironmentSize:
    Type: String
    Default: SMALL
    AllowedValues:
      - SMALL
      - MEDIUM
      - LARGE
Mappings:
  RegionMap:
    us-east-1:
      "AMALINUX2" : "ami-035be7bafff33b6b6"
    us-west-2:
      "AMALINUX2" : "ami-032509850cf9ee54e"
  InstanceSize:
    SMALL:
      "EC2" : "t3.small"
    MEDIUM:
      "EC2" : "t3.medium"
    LARGE:
      "EC2" : "t3.large"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - 
      Label:
        default: "Environment Configuration"
      Parameters:
        - App
        - ASI
        - Environment
        - Owner
        - ConfigVersion
    -
      Label: 
        default: "Network Configuration"
      Parameters:
        - vpcid
        - lbsubneta
        - lbsubnetb
        - subnetid
    -
      Label:
        default: "Launch Template Configuration"
      Parameters:
        - LogBucket
        - EnvironmentSize
        - keyname
        - certificatearn

Resources:
  LaunchTemplate: 
    Type: "AWS::EC2::LaunchTemplate"
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          webgoat:
            - "configure_cfn"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --configsets webgoat --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"

    Properties:
      LaunchTemplateName: !Join ["-", [!Ref "AWS::StackName", "webgoat", !Ref App]]
      LaunchTemplateData:
        IamInstanceProfile: 
            Name: !Join ["-", [!Ref "AWS::StackName", "Ec2Profile"]]
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX2]
        InstanceType: !FindInMap [InstanceSize, !Ref EnvironmentSize, EC2]
        KeyName: !Ref keyname
        SecurityGroupIds:
          - !Ref AutoScaleGroupSg
        UserData:
          "Fn::Base64":
            !Sub |
              #!/usr/bin/env bash
              # configVersion ${ConfigVersion}
              yum update -y # always do this yum update -y aws-cfn-bootstrap
              sysctl -w net.ipv6.conf.all.disable_ipv6=1 #jesus ffs
              sysctl -w net.ipv6.conf.default.disable_ipv6=1 #seriously
              sudo yum install java-11 -y
              wget -q https://github.com/WebGoat/WebGoat/releases/download/v8.0.0.M25/webgoat-server-8.0.0.M25.jar
              java -Dserver.address=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4) -jar webgoat-server-8.0.0.M25.jar >> /var/log/webgoat 2>&1 &
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --configsets webgoat --region ${AWS::Region}
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

# Begin other resource definitions
  LoadBalancerSg:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "${App}-${Environment}-${ASI} load balancer security group"
      VpcId: !Ref vpcid
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: "TCP"
          ToPort: 80
          FromPort: 80
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: "TCP"
          ToPort: 443
          FromPort: 443
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          ToPort: -1
          IpProtocol: "-1"
      Tags:
        -
          Key: "Name"
          Value: !Sub "${App}-${Environment}-${ASI}-lb-sg"
        -
          Key: "Project"
          Value: !Ref ASI
        -
          Key: "Environment"
          Value: !Ref Environment
        -
          Key: "Owner"
          Value: !Ref Owner

  AutoScaleGroupSg:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "${Environment}-${ASI}-${App} autoscale security group"
      VpcId: !Ref vpcid
      SecurityGroupIngress:
        -
          CidrIp: 10.0.0.0/8
          IpProtocol: "TCP"
          ToPort: 22
          FromPort: 22
        -
          SourceSecurityGroupId: !Ref LoadBalancerSg
          IpProtocol: "TCP"
          ToPort: 8080
          FromPort: 8080
        -
          SourceSecurityGroupId: !Ref LoadBalancerSg
          IpProtocol: "TCP"
          ToPort: 443
          FromPort: 443
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          ToPort: -1
          IpProtocol: "-1"
      Tags:
        -
          Key: "Name"
          Value: !Sub "${App}-${Environment}-${ASI}-asg-sg"
        -
          Key: "Project"
          Value: !Ref ASI
        -
          Key: "Environment"
          Value: !Ref Environment
        -
          Key: "Owner"
          Value: !Ref Owner

  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    CreationPolicy:
      ResourceSignal:
       Count: "1"
       Timeout: PT15M        
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
    Properties:
      MinSize: "1"
      MaxSize: "5"
      Cooldown: "120"
      DesiredCapacity: "1"
      LaunchTemplate:
        LaunchTemplateId:
          Ref: "LaunchTemplate"
        Version:
          Fn::GetAtt:
            [ "LaunchTemplate", "LatestVersionNumber" ]
      VPCZoneIdentifier: !Ref subnetid
      TargetGroupARNs: 
        - !Ref TargetGroup8080
      Tags:
      - 
        Key: "Name"
        Value: !Sub "${App}-${Environment}-${ASI}-alb-asg"
        PropagateAtLaunch: true      
      -
        Key: "Project"
        Value: !Ref ASI
        PropagateAtLaunch: true      
      -
        Key: "Environment"
        Value: !Ref Environment
        PropagateAtLaunch: true      
      -
        Key: "Owner"
        Value: !Ref Owner
        PropagateAtLaunch: true      
      -
        Key: "ConfigVersion"
        Value: !Ref ConfigVersion
        PropagateAtLaunch: true    

  TargetGroup8080:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8080
      Protocol: "HTTP"
      VpcId: !Ref vpcid
      HealthCheckProtocol: "HTTP"
      HealthCheckPort: "8080"
      HealthCheckPath: "/WebGoat/login"
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Tags:
      - 
        Key: "Name"
        Value: !Sub "${App}-${Environment}-${ASI}-webgoat-tg"
      -
        Key: "Project"
        Value: !Ref ASI
      -
        Key: "Environment"
        Value: !Ref Environment
      -
        Key: "Owner"
        Value: !Ref Owner

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: "internet-facing"
      Subnets:
        - !Ref lbsubneta
        - !Ref lbsubnetb
      LoadBalancerAttributes:
      - Key: 'access_logs.s3.enabled'
        Value: 'true'
      - Key: 'access_logs.s3.bucket'
        Value: !Ref LogBucket
      - Key: 'access_logs.s3.prefix'
        Value: !Sub '${App}-${Environment}-${ASI}'
      Tags:
        - 
          Key: "Name"
          Value: !Sub "${App}-${Environment}-${ASI}-https-alb"
        -
          Key: "Project"
          Value: !Ref ASI
        -
          Key: "Environment"
          Value: !Ref Environment
        -
          Key: "Owner"
          Value: !Ref Owner
      SecurityGroups: 
        - !Ref AutoScaleGroupSg
        - !Ref LoadBalancerSg
      Type: "application"

  LoadBalancer80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: redirect
        RedirectConfig:
          Protocol: HTTPS
          Port: "443"
          Host: '#{host}'
          Path: '/#{path}'
          Query: '#{query}'
          StatusCode: HTTP_302

  LoadBalancer443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref certificatearn
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup8080
      SslPolicy: "ELBSecurityPolicy-2016-08"

  NgxLtRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: webgoatEC2
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ssm:DescribeAssociation
          - ssm:GetDeployablePatchSnapshotForInstance
          - ssm:GetDocument
          - ssm:DescribeDocument
          - ssm:GetManifest
          - ssm:GetParameters
          - ssm:ListAssociations
          - ssm:ListInstanceAssociations
          - ssm:PutInventory
          - ssm:PutComplianceItems
          - ssm:PutConfigurePackageResult
          - ssm:UpdateAssociationStatus
          - ssm:UpdateInstanceAssociationStatus
          - ssm:UpdateInstanceInformation
          Resource: "*"
        - Effect: Allow
          Action:
          - ssmmessages:CreateControlChannel
          - ssmmessages:CreateDataChannel
          - ssmmessages:OpenControlChannel
          - ssmmessages:OpenDataChannel
          Resource: "*"
        - Effect: Allow
          Action:
          - ec2messages:AcknowledgeMessage
          - ec2messages:DeleteMessage
          - ec2messages:FailMessage
          - ec2messages:GetEndpoint
          - ec2messages:GetMessages
          - ec2messages:SendReply
          Resource: "*"
        - Effect: Allow
          Action:
          - cloudwatch:PutMetricData
          Resource: "*"
        - Effect: Allow
          Action:
          - ec2:DescribeInstanceStatus
          Resource: "*"
        - Effect: Allow
          Action:
          - elasticloadbalancing:DescribeTargetHealth
          Resource: "*"
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:DescribeLogGroups
          - logs:DescribeLogStreams
          - logs:PutLogEvents         
          Resource: 'arn:aws:logs:*:*:*'
      Roles:
      - !Ref NgxLtRole
  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref NgxLtRole
      InstanceProfileName: !Join ["-", [!Ref "AWS::StackName", "Ec2Profile"]]
Outputs:
  albPublicDnsName:
    Description: public url for network load balancer
    Value: !Join ["", ["https://", !GetAtt ElasticLoadBalancer.DNSName, "/"]]
  configVersion:
    Description: "ConfigVersion -- useful for rolling an update"
    Value: !Ref ConfigVersion

# ToDo:
