---
Description: "Nginx proxy Application LoadBalancer,Target Group, ASG and Launch Template"
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  App:
    Type: String
    AllowedValues:
      - api
      - www
    Description: "Select endpoint proxy (api|www)"
  ASI:
    Type: String
    MinLength: 2
    MaxLength: 5
    Description: "asi - must be lower-case, limit 4 characters"
    AllowedPattern: "[a-z]*"
  Environment:
    Type: String
    MinLength: 3
    MaxLength: 7
    Description: "environment (nonprod|dev|itg|cat|prod) - must be lower-case, limit 7 characters"
    AllowedPattern: "[a-z]*"
  Owner:
    Type: String
    Description: "email address of the the Owner of this stack"
    Default: "admin@root.com"
    AllowedPattern: "^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
  ConfigVersion:
    Type: String
    Description: "major.minor version of the config to use, eg: 1.0"
    MinLength: 3
    MaxLength: 5
    AllowedPattern: '(\d{1,2})\.(\d{1,2})'
  ProxyPassEndpoint:
    Type: String
    Description: "url of the upstream host you will proxy to"
  LogBucket:
    Type: String
    Description: "s3 elb logbucket name"
    Default: "fcz-dev-us-east-1-elblogs"
  certificatearn:
    Type: String
    Description: "arn for the load balancer tls listener certificate"
  vpcid:
    Type: AWS::EC2::VPC::Id
  keyname:
    Type: AWS::EC2::KeyPair::KeyName
  lbsubneta:
    Type: AWS::EC2::Subnet::Id
    Description: "public subnet for load balancer placment"
  lbsubnetb:
    Type: AWS::EC2::Subnet::Id
    Description: "public subnet for load balancer placment"
  subnetid:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "private subnets for autoscale group"
  EnvironmentSize:
    Type: String
    Default: SMALL
    AllowedValues:
      - SMALL
      - MEDIUM
      - LARGE
Conditions:
  isApi:
    !Equals [!Ref App, "api"]
  isWww:
    !Equals [!Ref App, "www"]
Mappings:
  RegionMap:
    us-east-1:
      "AMALINUX2" : "ami-035be7bafff33b6b6"
    us-west-2:
      "AMALINUX2" : "ami-032509850cf9ee54e"
  InstanceSize:
    SMALL:
      "EC2" : "t3.small"
    MEDIUM:
      "EC2" : "t3.medium"
    LARGE:
      "EC2" : "t3.large"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - 
      Label:
        default: "Environment Configuration"
      Parameters:
        - App
        - ASI
        - Environment
        - Owner
        - ConfigVersion
    -
      Label: 
        default: "Network Configuration"
      Parameters:
        - vpcid
        - lbsubneta
        - lbsubnetb
        - subnetid
    -
      Label:
        default: "Launch Template Configuration"
      Parameters:
        - ProxyPassEndpoint
        - LogBucket
        - EnvironmentSize
        - keyname
        - certificatearn

Resources:
  LaunchTemplate: 
    Type: "AWS::EC2::LaunchTemplate"
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          nginx:
            - "configure_cfn"
            - "config_nginx"
            - "install_awslogs"
            - "verify_instance_health"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --configsets nginx --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        config_nginx:
          commands:
            01_install_nginx:
              command: amazon-linux-extras install nginx1.12 -y
            02_enable_nginx:
              command: /bin/systemctl enable nginx.service
            03_start_nginx:
              command: /bin/systemctl restart nginx.service
          files:
            /etc/nginx/nginx.conf:
              content: !Sub |
                user nginx;
                worker_processes auto;
                error_log /var/log/nginx/error.log;
                events {
                  worker_connections 1024;
                }
                http {
                  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                                    '$status $body_bytes_sent "$http_referer" '
                                    '"$http_user_agent" "$http_x_forwarded_for" '
                                    'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

                  access_log /var/log/nginx/access.log  main;
                  sendfile on;
                  tcp_nopush          on;
                  tcp_nodelay         on;
                  keepalive_timeout   65;
                  types_hash_max_size 2048;
 
                  include             /etc/nginx/mime.types;
                  default_type        application/octet-stream;

                  server {
                    listen 80 default_server;
                    server_name ${App}.${Environment}.${ASI}.fortunecookiezen.cc;
                    server_tokens off;
                    resolver 169.254.169.253 valid=30s;

                    location / {
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_http_version 1.1;
                      set $remote ${ProxyPassEndpoint};
                      proxy_pass $remote;
                    }
                    location ~ ^/internal/ {
                      return 404;
                    }
                  }
                  server {
                    listen 81 default_server;
                    location /nginx-health {
                      access_log off;
                      return 200 "healthy\n";
                      }
                  }                  
                }
              mode: 000644
              owner: root
              group: root
              # cfn-init supports sysvinit, not systemd, so no services here. See above.
        install_awslogs:
          commands:
            01_install_awslogs:
              command: yum install -y awslogs
            02_configure_awslogs:
              command: cp /tmp/awslogs/awscli.conf /etc/awslogs/awscli.conf
          files:
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                use_gzip_http_content_encoding = true

                [nginx]
                file = /var/log/nginx/access.log
                log_group_name = ${ASI}-${Environment}-${App}-proxy-log-group
                log_stream_name = ${ASI}-${Environment}-${App}-access-logs
                datetime_format = %b %d %H:%M:%S
                buffer_duration = 5000
                initial_position = start_of_file
            /tmp/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
          services:
            sysvinit:
              awslogsd:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/awslogs/awslogs.conf"
                  - "/etc/awslogs/awscli.conf"
        verify_instance_health:
          commands:
            ELBV2HealthCheck:
              command: !Sub
                'until [ "$state" == "\"healthy\"" ]; do state=$(aws --region ${AWS::Region} elbv2 describe-target-health
                --target-group-arn ${TargetGroup80}
                --targets Id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id),Port=80
                --query TargetHealthDescriptions[0].TargetHealth.State); sleep 10; done'

    Properties:
      LaunchTemplateName: !Join ["-", [!Ref "AWS::StackName", "nginx", !Ref App]]
      LaunchTemplateData:
        IamInstanceProfile: 
            Name: !Join ["-", [!Ref "AWS::StackName", "Ec2Profile"]]
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX2]
        InstanceType: !FindInMap [InstanceSize, !Ref EnvironmentSize, EC2]
        KeyName: !Ref keyname
        SecurityGroupIds:
          - !Ref AutoScaleGroupSg
        TagSpecifications:
          -
            ResourceType: instance
            Tags:
              -
                Key: "Name"
                Value: !Sub "${App}-${Environment}-${ASI}-instance"
              -
                Key: "Project"
                Value: !Ref ASI
              -
                Key: "Environment"
                Value: !Ref Environment
              - 
                Key: "Owner"
                Value: !Ref Owner
              -
                Key: "Environment"
                Value: !Ref Environment
          -
            ResourceType: volume
            Tags:
              -
                Key: "Name"
                Value: !Sub "${App}-${Environment}-${ASI}-volume"
              -
                Key: "Project"
                Value: !Ref ASI
              -
                Key: "Environment"
                Value: !Ref Environment
              - 
                Key: "Owner"
                Value: !Ref Owner
              -
                Key: "Environment"
                Value: !Ref Environment
        UserData:
          "Fn::Base64":
            !Sub |
              #!/usr/bin/env bash
              # configVersion ${ConfigVersion}
              yum update -y # always do this yum update -y aws-cfn-bootstrap
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --configsets nginx --region ${AWS::Region}
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

# Begin other resource definitions
  LoadBalancerSg:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "${App}-${Environment}-${ASI} load balancer security group"
      VpcId: !Ref vpcid
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: "TCP"
          ToPort: 80
          FromPort: 80
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: "TCP"
          ToPort: 443
          FromPort: 443
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          ToPort: -1
          IpProtocol: "-1"
      Tags:
        -
          Key: "Name"
          Value: !Sub "${App}-${Environment}-${ASI}-lb-sg"
        -
          Key: "Project"
          Value: !Ref ASI
        -
          Key: "Environment"
          Value: !Ref Environment
        -
          Key: "Owner"
          Value: !Ref Owner

  AutoScaleGroupSg:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "${Environment}-${ASI}-${App} autoscale security group"
      VpcId: !Ref vpcid
      SecurityGroupIngress:
        -
          CidrIp: 10.0.0.0/8
          IpProtocol: "TCP"
          ToPort: 22
          FromPort: 22
        -
          SourceSecurityGroupId: !Ref LoadBalancerSg
          IpProtocol: "TCP"
          ToPort: 80
          FromPort: 80
        -
          SourceSecurityGroupId: !Ref LoadBalancerSg #health checks
          IpProtocol: "TCP"
          ToPort: 81
          FromPort: 81
        -
          SourceSecurityGroupId: !Ref LoadBalancerSg
          IpProtocol: "TCP"
          ToPort: 443
          FromPort: 443
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          ToPort: -1
          IpProtocol: "-1"
      Tags:
        -
          Key: "Name"
          Value: !Sub "${App}-${Environment}-${ASI}-asg-sg"
        -
          Key: "Project"
          Value: !Ref ASI
        -
          Key: "Environment"
          Value: !Ref Environment
        -
          Key: "Owner"
          Value: !Ref Owner

  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    CreationPolicy:
      ResourceSignal:
       Count: "1"
       Timeout: PT15M        
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
    Properties:
      MinSize: "2"
      MaxSize: "5"
      Cooldown: "120"
      DesiredCapacity: "2"
      LaunchTemplate:
        LaunchTemplateId:
          Ref: "LaunchTemplate"
        Version:
          Fn::GetAtt:
            [ "LaunchTemplate", "LatestVersionNumber" ]
      VPCZoneIdentifier: !Ref subnetid
      TargetGroupARNs: 
        - !Ref TargetGroup80
      Tags:
      - 
        Key: "Name"
        Value: !Sub "${App}-${Environment}-${ASI}-alb-asg"
        PropagateAtLaunch: true      
      -
        Key: "Project"
        Value: !Ref ASI
        PropagateAtLaunch: true      
      -
        Key: "Environment"
        Value: !Ref Environment
        PropagateAtLaunch: true      
      -
        Key: "Owner"
        Value: !Ref Owner
        PropagateAtLaunch: true      
      -
        Key: "ConfigVersion"
        Value: !Ref ConfigVersion
        PropagateAtLaunch: true    

  TargetGroup80:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: "HTTP"
      VpcId: !Ref vpcid
      HealthCheckProtocol: "HTTP"
      HealthCheckPort: "81"
      HealthCheckPath: "/nginx-health"
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Tags:
      - 
        Key: "Name"
        Value: !Sub "${App}-${Environment}-${ASI}-nginx-tg"
      -
        Key: "Project"
        Value: !Ref ASI
      -
        Key: "Environment"
        Value: !Ref Environment
      -
        Key: "Owner"
        Value: !Ref Owner

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: "internet-facing"
      Subnets:
        - !Ref lbsubneta
        - !Ref lbsubnetb
      LoadBalancerAttributes:
      - Key: 'access_logs.s3.enabled'
        Value: 'true'
      - Key: 'access_logs.s3.bucket'
        Value: !Ref LogBucket
      - Key: 'access_logs.s3.prefix'
        Value: !Sub '${App}-${Environment}-${ASI}'
      Tags:
        - 
          Key: "Name"
          Value: !Sub "${App}-${Environment}-${ASI}-https-alb"
        -
          Key: "Project"
          Value: !Ref ASI
        -
          Key: "Environment"
          Value: !Ref Environment
        -
          Key: "Owner"
          Value: !Ref Owner
      SecurityGroups: 
        - !Ref AutoScaleGroupSg
        - !Ref LoadBalancerSg
      Type: "application"

  LoadBalancer80:
    Condition: isWww
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: redirect
        RedirectConfig:
          Protocol: HTTPS
          Port: "443"
          Host: '#{host}'
          Path: '/#{path}'
          Query: '#{query}'
          StatusCode: HTTP_302

  LoadBalancerApi:
    Condition: isApi
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: fixed-response
        FixedResponseConfig:
          ContentType: 'application/json'
          MessageBody: '{"message": "HTTP is not supported"}'
          StatusCode: '405'

  LoadBalancer443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref certificatearn
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup80
      SslPolicy: "ELBSecurityPolicy-2016-08"

  NgxLtRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: nginxEC2
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ssm:DescribeAssociation
          - ssm:GetDeployablePatchSnapshotForInstance
          - ssm:GetDocument
          - ssm:DescribeDocument
          - ssm:GetManifest
          - ssm:GetParameters
          - ssm:ListAssociations
          - ssm:ListInstanceAssociations
          - ssm:PutInventory
          - ssm:PutComplianceItems
          - ssm:PutConfigurePackageResult
          - ssm:UpdateAssociationStatus
          - ssm:UpdateInstanceAssociationStatus
          - ssm:UpdateInstanceInformation
          Resource: "*"
        - Effect: Allow
          Action:
          - ssmmessages:CreateControlChannel
          - ssmmessages:CreateDataChannel
          - ssmmessages:OpenControlChannel
          - ssmmessages:OpenDataChannel
          Resource: "*"
        - Effect: Allow
          Action:
          - ec2messages:AcknowledgeMessage
          - ec2messages:DeleteMessage
          - ec2messages:FailMessage
          - ec2messages:GetEndpoint
          - ec2messages:GetMessages
          - ec2messages:SendReply
          Resource: "*"
        - Effect: Allow
          Action:
          - cloudwatch:PutMetricData
          Resource: "*"
        - Effect: Allow
          Action:
          - ec2:DescribeInstanceStatus
          Resource: "*"
        - Effect: Allow
          Action:
          - elasticloadbalancing:DescribeTargetHealth
          Resource: "*"
        - Effect: Allow
          Action:
          - ds:CreateComputer
          - ds:DescribeDirectories
          Resource: "*"
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:DescribeLogGroups
          - logs:DescribeLogStreams
          - logs:PutLogEvents         
          Resource: 'arn:aws:logs:*:*:*'
        - Effect: Allow
          Action: 
          - s3:GetBucketLocation
          - s3:PutObject
          - s3:GetObject
          - s3:GetEncryptionConfiguration
          - s3:AbortMultipartUpload
          - s3:ListMultipartUploadParts
          - s3:ListBucket
          - s3:ListBucketMultipartUploads
          Resource: "*"
      Roles:
      - !Ref NgxLtRole
  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref NgxLtRole
      InstanceProfileName: !Join ["-", [!Ref "AWS::StackName", !Ref "AWS::Region", "Ec2Profile"]]
Outputs:
  albPublicDnsName:
    Description: public url for network load balancer
    Value: !Join ["", ["https://", !GetAtt ElasticLoadBalancer.DNSName, "/"]]
  proxyPassEndpoint:
    Description: target we are proxy for
    Value: !Ref ProxyPassEndpoint
  configVersion:
    Description: "ConfigVersion -- useful for rolling an update"
    Value: !Ref ConfigVersion

# ToDo:
