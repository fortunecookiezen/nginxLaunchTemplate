---
Description: "Nginx proxy ASG and Launch Template"
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
  keyname:
    Type: AWS::EC2::KeyPair::KeyName
  ec2securitygroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: "EC2 Security group for instance"
  nlbsecuritygroup:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: "Security group for NetworkLoadBalancer"  
  subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "need subnet id for EC2 instance"
Mappings:
  RegionMap:
    us-east-1:
      "AMALINUX2" : "ami-035be7bafff33b6b6"
    us-west-2:
      "AMALINUX2" : "ami-032509850cf9ee54e"
Resources:
  LaunchTemplate: #need to turn this into a launchconfig, launchtemplates cannot be signaled
    Type: "AWS::EC2::LaunchTemplate"
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          nginx:
            - "configure_cfn"
            - "config_nginx"
            - "verify_instance_health"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --configsets nginx --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        config_nginx:
          sources: 
            /etc/nginx: "https://github.com/fortunecookiezen/ec2nginx/tarball/master"
          services: 
            sysvinit: 
              nginx: 
                enabled: true
                ensureRunning: true
                files: 
                  - "/etc/nginx/nginx.conf"
        verify_instance_health:
          commands:
            ELBHealthCheck:
              command: !Sub
                'until [ "$state" == "\"InService\"" ]; do state=$(aws --region ${AWS::Region} elb describe-instance-health
                 --load-balancer-name ${ElasticLoadBalancer}
                 --instances $(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                 --query InstanceStates[0].State); sleep 10; done'
    Properties:
      LaunchTemplateName: "nginx"
      LaunchTemplateData:
        IamInstanceProfile: 
            Name: "Ec2SsmRole"
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX2]
        InstanceType: "t3.small"
        KeyName: !Ref keyname
        SecurityGroupIds:
          - !Ref ec2securitygroup
        UserData:
          "Fn::Base64":
            !Sub |
              #!/usr/bin/env bash
              yum update -y aws-cfn-bootstrap # good practice - always do this.
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --configsets nginx --region ${AWS::Region}
              yum -y update
              amazon-linux-extras install nginx1.12 -y
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
              /bin/systemctl enable nginx.service #manually enable this thing
              /bin/systemctl restart nginx.service #manually kick this thing
  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    CreationPolicy:
      ResourceSignal:
       Count: "1"
       Timeout: PT15M        
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
    Properties:
      MinSize: "2"
      MaxSize: "5"
      DesiredCapacity: "2"
      LaunchTemplate:
        LaunchTemplateId:
          Ref: "LaunchTemplate"
        Version:
          Fn::GetAtt:
            [ "LaunchTemplate", "LatestVersionNumber" ]
      VPCZoneIdentifier: !Ref subnets
        #- ""
        #- ""
#      LoadBalancerNames: [!Ref 'ElasticLoadBalancer']
      TargetGroupARNs: "listofstrings"       
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref subnets
      Scheme: "internet-facing"
      SecurityGroups: !Ref nlbsecuritygroup
#      SubnetMappings:
#        - AllocationId: !Ref firsteipallocationid
#          SubnetId: !Ref lbsubneta
#        - AllocationId: !Ref secondeipallocationid
#          SubnetId: !Ref lbsubnetb
      Tags:
        - Key: "Name"
          Value: ""
      Type: "network"
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: 80
      Protocol: http
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
